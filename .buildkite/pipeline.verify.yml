---
env:
  PANTS_CONFIG_FILES: "['pants.toml', 'pants.ci.toml']"
  TAG: ci-pipeline

# TODO: Cache for JS, Rust deps

# TODO: Will want to use sccache for Rust, I think

# TODO: possibly just us Docker for caching?

steps:
  # - label: ":github: Validate CODEOWNERS"
  #   command: ".buildkite/scripts/validate_codeowners.sh"
  #   plugins:
  #     - docker#v3.8.0:
  #         image: "node"
  #         entrypoint: "bash"

  # - label: ":large_blue_square::lint-roller: Lint Protobuf"
  #   command:
  #     - buf lint --verbose

  # - label: ":large_blue_square::face_with_symbols_on_mouth: Protobuf Breaking Changes"
  #   command:
  #     - "buf breaking --against=https://github.com/grapl-security/grapl.git --verbose"

  # - label: ":rust: rustfmt"
  #   command:
  #     - cd src/rust
  #     - rustup set profile default
  #     - bin/format --check

  # - label: ":rust: Linting"
  #   command:
  #     - cd src/rust
  #     - bin/lint
  #   agents:
  #     queue: "beefy"

  # - label: ":rust: Unit Tests"
  #   command:
  #     - cd src/rust
  #     - cargo test
  #   agents:
  #     queue: "beefy"

  # - label: ":rust: Unit Tests via Docker plugin"
  #   command:
  #     - cd src/rust
  #     - cargo test
  #   plugins:
  #     - docker#v3.8.0:
  #         image: "rust:1.51.0"
  #   agents:
  #     queue: "beefy"

  # - label: ":rust::docker: Unit Tests"
  #   command:
  #     - make test-unit-rust
  #   agents:
  #     queue: "beefy"

  # - label: ":python::jeans: Linting"
  #   command:
  #     - make lint-python
  #   retry:
  #     automatic:
  #       limit: 3

  # - label: ":bash::jeans: Linting"
  #   command:
  #     - make lint-shell

  # - label: ":python::jeans: Unit Tests"
  #   command:
  #     - make test-unit-python
  #   retry:
  #     automatic:
  #       limit: 3

  # - label: ":python::jeans: Typechecking"
  #   command:
  #     - make test-typecheck-pants
  #   retry:
  #     automatic:
  #       limit: 3

  # # TODO: Consider beefy queue
  # - label: ":python::docker: Typechecking (:no_entry_sign::jeans:)"
  #   command:
  #     - make test-typecheck-docker

  # # TODO: Consider beefy queue
  # - label: ":typescript::docker: Unit Tests"
  #   command:
  #     - make test-unit-js

  # - label: ":typescript::yaml::lint-roller: Lint using Prettier"
  #   command:
  #     - make lint-prettier

  # - label: ":yarn: Build UX"
  #   command: make build-ux
  #   plugins:
  #     - docker#v3.8.0:
  #         # This container actually contains `make`, too!
  #         image: "node:16.5.0"

  # - label: ":aws-lambda::package: Create Lambda Zips"
  #   command:
  #     - make lambdas
  #   agents:
  #     queue: "beefy"

  # - label: ":hammer: Integration Tests"
  #   command:
  #     - .buildkite/scripts/integration.sh
  #   agents:
  #     queue: "beefy"
  #   artifact_paths:
  #     - "test_artifacts/**/*"

  # - label: ":hammer: E2E Tests"
  #   command:
  #     - .buildkite/scripts/e2e.sh
  #   agents:
  #     queue: "beefy"
  #   artifact_paths:
  #     - "test_artifacts/**/*"

  # - label: ":packer::lint-roller: Packer Linting"
  #   command:
  #     # Since we run it in a container, we can't use the `make` for it
  #     - .buildkite/scripts/lint_packer.sh
  #   # Silently hangs unless the following is specified.
  #   plugins:
  #     - docker#v3.8.0:
  #         image: "hashicorp/packer:1.7.2"
  #         entrypoint: bash

  # - label: ":thinking_face: AMI Test?"
  #   # Don't want to run this again in the merge pipeline, since
  #   # building the image does exactly the same thing. We don't want to
  #   # waste time.
  #   if: build.env("BUILDKITE_PIPELINE_NAME") == "grapl/verify"
  #   plugins:
  #     - chronotc/monorepo-diff#v2.0.4:
  #         diff: .buildkite/shared/scripts/diff.sh
  #         log_level: "debug"
  #         watch:
  #           - path:
  #               - ".buildkite/scripts/test_packer.sh"
  #               - "packer/"
  #               - ".buildkite/scripts/build_packer_ci.sh"
  #               - ".buildkite/scripts/lib/packer.sh"
  #               - ".buildkite/scripts/lib/packer_constants.sh"
  #             config:
  #               label: ":pipeline: Upload AMI Test"
  #               command: "buildkite-agent pipeline upload .buildkite/pipeline.verify.ami-test.yml"

  ########################################################################

    # Uploads to Buildkite's bucket, as expected
  - label: "Test Packer Build without dropping role"
    command: "packer_test.sh"
    key: "no-drop"
    plugins:
      - docker#v3.8.0:
          image: "hashicorp/packer:1.7.2"
          entrypoint: bash
          propagate-aws-auth-tokens: true
          environment:
            - "BUILDKITE_STEP_KEY"
    agents:
      queue: "packer-staging"

  # Uploads to Buildkite's bucket, as expected
  - label: "Test Packer Build with in-command role dropping"
    command: "packer_test.sh"
    key: "with-drop"
    plugins:
      - docker#v3.8.0:
          image: "hashicorp/packer:1.7.2"
          entrypoint: bash
          propagate-aws-auth-tokens: true
          environment:
            - "BUILDKITE_STEP_KEY"
    agents:
      queue: "packer-staging"

    # How does this WORK?!
    # I pass in the (assume-role) credentials and run packer: cool
    # I drop the variables
    # I pass in the upload variables
    # Does a container have access to the IMDS? Apparently so!
  - label: "Test Packer Build with in-command role-dropping and full env"
    command: "packer_test.sh"
    key: "drop-with-env"
    plugins:
      - docker#v3.8.0:
          image: "hashicorp/packer:1.7.2"
          entrypoint: bash
          propagate-aws-auth-tokens: true
          environment:
            - "BUILDKITE_ARTIFACT_UPLOAD_DESTINATION"
            - "BUILDKITE_S3_DEFAULT_REGION"
            - "BUILDKITE_STEP_KEY"
    agents:
      queue: "packer-staging"

  # This fails, despite the fact that the role has definitely been dropped in post-command
  - label: "Test Packer Build with post-command role drop"
    command: "packer_test.sh"
    key: "post-command"
    plugins:
      - docker#v3.8.0:
          image: "hashicorp/packer:1.7.2"
          entrypoint: bash
          propagate-aws-auth-tokens: true
          environment:
            - "BUILDKITE_STEP_KEY"
    agents:
      queue: "packer-staging"
    artifact_paths:
      - "packer-manifest.json"

  # This fails, despite the fact that the role has definitely been dropped in pre-artifact
  - label: "Test Packer Build with pre-artifact role drop"
    command: "packer_test.sh"
    key: "pre-artifact"
    plugins:
      - docker#v3.8.0:
          image: "hashicorp/packer:1.7.2"
          entrypoint: bash
          propagate-aws-auth-tokens: true
          environment:
            - "BUILDKITE_STEP_KEY"
    agents:
      queue: "packer-staging"
    artifact_paths:
      - "packer-manifest.json"

  - label: "Test Packer Build with artifacts plugin for upload, no permission drop"
    command: "packer_test.sh"
    key: "artifact-plugin-no-drop"
    plugins:
      - artifacts#v1.3.0:
          upload:
            - "packer-manifest.json"
    agents:
      queue: "packer-staging"

  # NOTE: Artifact command post-command hook runs after repository post-command hook.
  # With no drop, this fails, as expected
  - label: "Test Packer Build with artifacts plugin for upload, permission drop"
    command: "packer_test.sh"
    key: "artifact-plugin-with-drop"
    plugins:
      - artifacts#v1.3.0:
          upload:
            - "packer-manifest.json"
    agents:
      queue: "packer-staging"

  - label: "Test Packer natively, internal upload, no permission drop"
    command: "packer_test.sh"
    key: "native-no-drop"
    agents:
      queue: "packer-staging"

  # This legitimately works, and is about the only one that makes sense.
  - label: "Test Packer natively, internal upload, with permission drop"
    command: "packer_test.sh"
    key: "native-with-drop"
    agents:
      queue: "packer-staging"

  # This also fails
  - label: "Test Packer Build with artifacts plugin for upload, post-command permission drop"
    command: "packer_test.sh"
    key: "artifact-plugin-with-post-command-drop"
    plugins:
      - artifacts#v1.3.0:
          upload:
            - "packer-manifest.json"
    agents:
      queue: "packer-staging"


  - label: "Environment of Docker: bare"
    command: env
    plugins:
      - docker#v3.8.0:
          image: "ubuntu"

  - label: "Environment of Docker: propagated, no env"
    command: env
    plugins:
      - docker#v3.8.0:
          image: "ubuntu"
          propagate-environment: true


  - label: "Environment of Docker: propagated, env"
    command: env
    env:
      SECRET_MESSAGE: "Hola Mundo"
    plugins:
      - docker#v3.8.0:
          image: "ubuntu"
          propagate-environment: true


  - label: "Environment of Docker: propagated, env, rebinding"
    command: env
    env:
      SECRET_MESSAGE: "Hola Mundo"
      GIT_SHA: "${BUILDKITE_COMMIT}"
    plugins:
      - docker#v3.8.0:
          image: "ubuntu"
          propagate-environment: true
